Classes of instructions:
-Class 0: 1 Literal. Bit layout: type, class
-Class 1: 1 or 2 reg, literal. Bit layout: regs1, literal, type, class
-Class 2: 1 reg, literal, subtype. Bit layout: regs1, literal, subtype, type, class
-Class 3: 3 regs, subtype. Bit layout: regs1,regs2,regd, subtype, type, class

The mapping of those fields to a 32 bit word is as follows:
0 -----------LLLLLLLLLLLLLLLLTTTCC
1 ----LLLLLLLLLLLLLLLLRRRRRRRRTTCC
2 ------LLLLLLLLLLLLLLLLRRRRSSSTCC
3 ---------------RRRRRRRRRRRRSSTCC
  !---!---!---!---!---!---!---!---

where:
- C, Class
- T, type of instruction (C+T = Opcode)
- S, subtype of instruction (in which case S+C+T = Opcode)
- R, Register
- L, Literal

Complete instruction set
C0: Jump, Call, NewVar, Return
C1: LoadI, LoadB, Store, StoreB, Pop, Push
C2: JumpIfTrue, JumpIfFalse, ArithI
C3: Arith, Comp, Move

Subtypes (some left unused!!)
comparison: ==, !=, <, !
arith: +,-,/,*,move
logic: or, and, xor, not

Arithmetic and logic operations have different opcodes, as they can have
different implementations details in a given machine.

As the grammar evolves those SDDs have to be adapted.

------------------------------------------------------------------------------

L-attributed SDD for node creation.

Prog  := E          ** P.node   = E.synt
E     := T E'       ** E.node   = E'.synt
                       E'.inht  = T.node
E'    := + T E'     ** E'1.inht = new Node(+, E'.inht, T.node)
                       E'.synt  = E'1.synt
      |  empty      ** E'.synt  = E'.inht
T     := F          ** T.synt   = F.node
F     := ( E )      ** F.node   = E.node
      |  numerical  ** F.node   = new Node(num_val)

------------------------------------------------------------------------------
L-attributed SDD for stmts creation.

Prog  := STMTS      ** STMTS.inht  = {}
STMTS := STMT STMTS ** STMTS1.inht = {STMTS1.inht, STMT.synt}
                    ** STMTS.synt  = STMTS1.synt
      |  {empty}    ** STMTS.synt  = new Block( {Stmt_i... Stmt_j})

STMT  := if(E){STMTS} IFELSE  ** STMT.synt = new IfStmt(E,STMTS, IFELSE.synt)
      |  E = E                ** STMT.synt = new AssignStmt(E,E1)
      |  E;                   ** STMT.synt = new ExprStmt(E)

------------------------------------------------------------------------------
L-attributed SDD for VarDecl creation.

DECL  := TYPE NAME_LIST ** DECL.synt      = NAME_LIST.synt
                        ** NAME_LIST.inht = {}, TYPE.synt

TYPE  := int      ** TYPE.synt = typeId(int)
      |  bool     ** TYPE.synt = typeId(bool)

NAME_LIST := name NAME_LIST'    ** NAME_LIST'.inht = {NAME_LIST.inht, new VarDecl(name,type)}
                                ** NAME_LIST.synt = NAME_LIST'.synt
NAME_LIST':= , name NAME_LIST'  ** NAME_LIST'1.inht = {NAME_LIST'.inht, new VarDecl(name,type)}
                                ** NAME_LIST'.synt = NAME_LIST'1.synt
          | empty               ** NAME_LIST'.synt = new VarDeclList(NAME_LIST.inht)}

------------------------------------------------------------------------------
L-attributed SDD for ScopeId creation

Prog  := STMTS                ** STMTS.inht = new ScopeId()

STMTS := STMT STMTS           ** STMTS1.inht = STMTS.inht
                              ** STMTS.inht = STMTS.inht
      |  empty

STMT  := if(E){STMTS} IFELSE  ** STMTS.inht = new ScopeId()
                              ** E.inht = STMT.inht
      |  DECL;                ** DECL.inht = STMT.inht
      |  E = E;               ** E.inht = STMT.inht

IFELSE:= else{STMTS}          ** STMTS.inht = new ScopeId()
      |  empty

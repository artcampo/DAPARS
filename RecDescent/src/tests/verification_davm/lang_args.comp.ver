Symbol: [ in scope 2 p1 of type int] to offset: 4
Symbol: [ in scope 2 p2 of type int] to offset: 3
Symbol: [ in scope 2 p3 of type int] to offset: 2
%0 = LoadI(9)
%1 = LoadI(8)
%2 = LoadI(7)
%3 = LoadI(6)
SetArg( %0)
SetArg( %1)
SetArg( %2)
SetArg( %3)
call [LT entry_f[isTarget]:0 ()]
%4 = GetRetVal()
store %4 to [LT MainDS:0 (a)]
ReturnMain
%0 = GetArg( arg0 )
%1 = Load [RT arp_f[isArp]:4 (p1)]
%2 = %0 + %1
%3 = Load [RT arp_f[isArp]:3 (p2)]
%4 = %2 + %3
%5 = Load [RT arp_f[isArp]:2 (p3)]
%6 = %4 + %5
SetRetVal( %6)
Return
%0 = Load [LT MainDS:-4 (__test_result)]
%1 = GetArg( arg0 )
%2 = %0 and %1
store %2 to [LT MainDS:-4 (__test_result)]
Return
---------
Bytecode:
0: LOADI, r0 val: 1  <- [main]
1: STORE, r0 -> [@-4]
2: LOADI, r1 val: 9
3: LOADI, r2 val: 8
4: LOADI, r3 val: 7
5: LOADI, r4 val: 6
6: MOV, rs1 rd0
7: PUSH, r2
8: PUSH, r3
9: PUSH, r4
10: CALL: @15
11: ADDI, rd15 3
12: MOV, rs0 rd5
13: STORE, r5 -> [@0]
14: STOP
15: PUSH, r14  <- [f]
16: MOV, rs15 rd14
17: LOADB, r1 <- [@ r14 + 4]
18: ADD, rs0 rs1 rd2
19: LOADB, r3 <- [@ r14 + 3]
20: ADD, rs2 rs3 rd4
21: LOADB, r5 <- [@ r14 + 2]
22: ADD, rs4 rs5 rd6
23: MOV, rs6 rd0
24: MOV, rs14 rd15
25: POP, r14
26: RETURN
27: PUSH, r14  <- [__test]
28: MOV, rs15 rd14
29: LOAD, rd1 <- [@-4]
30: AND, rs1 rs0 rd2
31: STORE, r2 -> [@-4]
32: MOV, rs14 rd15
33: POP, r14
34: RETURN

---------------------------------------------------
Parsing: "void main(){int a,b,c; while(true){b=2+3;} c=3+4; }"

Scopes of module:
Scope 0: {(1:main) }
Scope 1: {(2:a) (3:b) (4:c) }
Scope 2: {}


AST fully decorated dump:
[FDef] FuncDef: main
-[VDec] int a 
[VDec] int b 
[VDec] int c 
-WhileStmt:
--Cond: [Lit] 1 [bool Rvalue]
--Body:
---[Assgn] 
----[Var] b [int Lvalue Write Value Nmemb]
----Op: +  [int Rvalue]
-----[Lit] 2 [int Rvalue]
-----[Lit] 3 [int Rvalue]

--[Assgn] 
---[Var] c [int Lvalue Write Value Nmemb]
---Op: +  [int Rvalue]
----[Lit] 3 [int Rvalue]
----[Lit] 4 [int Rvalue]


Declaration Table:
1: Symbol: [ in scope 0 main of type function: ()->void]
2: Symbol: [ in scope 1 a of type int]
3: Symbol: [ in scope 1 b of type int]
4: Symbol: [ in scope 1 c of type int]

IR dump:
LT entry_main[isTarget]
0: %0 = LoadI(1)
1: JumpCondTrue %0 to:3
2: JumpCondFalse %0 to:8
3: %1 = LoadI(2)
4: %2 = LoadI(3)
5: %3 = %1 + %2
6: store %3 to [LT MainDS:1 (b)]
7: JumpCondFalse %0 to:0
8: %5 = LoadI(3)
9: %6 = LoadI(4)
10: %7 = %5 + %6
11: store %7 to [LT MainDS:2 (c)]
12: ReturnMain

---------------------------------------------------
Parsing: "void main(){ int a, b; if(true){int c; a=2+3;} else{ int d, e,f; d = 4; } int g; b=5+6; }"

Scopes of module:
Scope 0: {(1:main) }
Scope 1: {(2:a) (3:b) (8:g) }
Scope 2: {(4:c) }
Scope 3: {(5:d) (6:e) (7:f) }


AST fully decorated dump:
[FDef] FuncDef: main
-[VDec] int a 
[VDec] int b 
-IfStmt:
--Cond: [Lit] 1 [bool Rvalue]
--Then:
---[VDec] int c 
---[Assgn] 
----[Var] a [int Lvalue Write Value Nmemb]
----Op: +  [int Rvalue]
-----[Lit] 2 [int Rvalue]
-----[Lit] 3 [int Rvalue]
--Else:
---[VDec] int d 
[VDec] int e 
[VDec] int f 
---[Assgn] 
----[Var] d [int Lvalue Write Value Nmemb]
----[Lit] 4 [int Rvalue]

-[VDec] int g 
-[Assgn] 
--[Var] b [int Lvalue Write Value Nmemb]
--Op: +  [int Rvalue]
---[Lit] 5 [int Rvalue]
---[Lit] 6 [int Rvalue]


Declaration Table:
1: Symbol: [ in scope 0 main of type function: ()->void]
2: Symbol: [ in scope 1 a of type int]
3: Symbol: [ in scope 1 b of type int]
4: Symbol: [ in scope 2 c of type int]
5: Symbol: [ in scope 3 d of type int]
6: Symbol: [ in scope 3 e of type int]
7: Symbol: [ in scope 3 f of type int]
8: Symbol: [ in scope 1 g of type int]

IR dump:
LT entry_main[isTarget]
0: %0 = LoadI(1)
1: JumpCondTrue %0 to:3
2: JumpCondFalse %0 to:8
3: %1 = LoadI(2)
4: %2 = LoadI(3)
5: %3 = %1 + %2
6: store %3 to [LT MainDS:0 (a)]
7: JumpIncond11
8: %5 = LoadI(4)
9: store %5 to [LT MainDS:2 (d)]
10: JumpIncond11
11: %7 = LoadI(5)
12: %8 = LoadI(6)
13: %9 = %7 + %8
14: store %9 to [LT MainDS:1 (b)]
15: ReturnMain

---------------------------------------------------
Parsing: "void main(){int a,b; int* p; a=*p; b=2; p = &b; a = b + *p;}"

Scopes of module:
Scope 0: {(1:main) }
Scope 1: {(2:a) (3:b) (4:p) }


AST fully decorated dump:
[FDef] FuncDef: main
-[VDec] int a 
[VDec] int b 
-[VDec] int* p 
-[Assgn] 
--[Var] a [int Lvalue Write Value Nmemb]
--[Derop] * [int Lvalue Read]
---[Var] p [int* Lvalue Read Value Nmemb]
-[Assgn] 
--[Var] b [int Lvalue Write Value Nmemb]
--[Lit] 2 [int Rvalue]
-[Assgn] 
--[Var] p [int* Lvalue Write Value Nmemb]
--[Refop] @ [int* Lvalue]
---[Var] b [int Lvalue Read Address Nmemb]
-[Assgn] 
--[Var] a [int Lvalue Write Value Nmemb]
--Op: +  [int Rvalue]
---[Var] b [int Lvalue Read Value Nmemb]
---[Derop] * [int Lvalue Read]
----[Var] p [int* Lvalue Read Value Nmemb]


Declaration Table:
1: Symbol: [ in scope 0 main of type function: ()->void]
2: Symbol: [ in scope 1 a of type int]
3: Symbol: [ in scope 1 b of type int]
4: Symbol: [ in scope 1 p of type int*]

IR dump:
LT entry_main[isTarget]
0: %0 = Load [LT MainDS:2 (p)]
1: %1 = Load [ %0]
2: store %1 to [LT MainDS:0 (a)]
3: %3 = LoadI(2)
4: store %3 to [LT MainDS:1 (b)]
5: %5 = PtrElem( LT MainDS:1 (b))
6: store %5 to [LT MainDS:2 (p)]
7: %7 = Load [LT MainDS:1 (b)]
8: %8 = Load [LT MainDS:2 (p)]
9: %9 = Load [ %8]
10: %10 = %7 + %9
11: store %10 to [LT MainDS:0 (a)]
12: ReturnMain

---------------------------------------------------
Parsing: "void main(){int a; a= 2;} void f(int p1){int a; a=p1;}"

Scopes of module:
Scope 0: {(1:main) (3:f) }
Scope 1: {(2:a) }
Scope 2: {(4:p1) (5:a) }


AST fully decorated dump:
[FDef] FuncDef: main
-[VDec] int a 
-[Assgn] 
--[Var] a [int Lvalue Write Value Nmemb]
--[Lit] 2 [int Rvalue]
[FDef] FuncDef: f
-[VDec] int a 
-[Assgn] 
--[Var] a [int Lvalue Write Value Nmemb]
--[Var] p1 [int Lvalue Read Value Nmemb]


Declaration Table:
1: Symbol: [ in scope 0 main of type function: ()->void]
2: Symbol: [ in scope 1 a of type int]
3: Symbol: [ in scope 0 f of type function: (int)->void]
4: Symbol: [ in scope 2 p1 of type int]
5: Symbol: [ in scope 2 a of type int]

IR dump:
LT entry_main[isTarget]
0: %0 = LoadI(2)
1: store %0 to [LT MainDS:0 (a)]
2: ReturnMain
LT entry_f[isTarget]
0: %0 = GetArg( arg0 )
1: store %0 to [RT arp_f[isArp]:0 (a)]
2: Return

---------------------------------------------------
Parsing: "int f(int p1){int a; a=p1; return a;} void main(){int a; a=f(2);}"

Scopes of module:
Scope 0: {(1:f) (4:main) }
Scope 1: {(2:p1) (3:a) }
Scope 2: {(5:a) }


AST fully decorated dump:
[FDef] FuncDef: f
-[VDec] int a 
-[Assgn] 
--[Var] a [int Lvalue Write Value Nmemb]
--[Var] p1 [int Lvalue Read Value Nmemb]
-[Retst] Return (a)
--[Var] a [int Lvalue Read Value Nmemb]
[FDef] FuncDef: main
-[VDec] int a 
-[Assgn] 
--[Var] a [int Lvalue Write Value Nmemb]
--[Fret] FuncRet: int [int Rvalue Nmemb]
---[Fcal] FuncCall: f [function: (int)->int]
----[Var] f [function: (int)->int Read Value Nmemb]
----[Lit] 2 [int]


Declaration Table:
1: Symbol: [ in scope 0 f of type function: (int)->int]
2: Symbol: [ in scope 1 p1 of type int]
3: Symbol: [ in scope 1 a of type int]
4: Symbol: [ in scope 0 main of type function: ()->void]
5: Symbol: [ in scope 2 a of type int]

IR dump:
LT entry_main[isTarget]
0: %0 = LoadI(2)
1: SetArg( %0)
2: call [LT entry_f[isTarget]:0 ()]
3: %1 = GetRetVal()
4: store %1 to [LT MainDS:0 (a)]
5: ReturnMain
LT entry_f[isTarget]
0: %0 = GetArg( arg0 )
1: store %0 to [RT arp_f[isArp]:0 (a)]
2: %2 = Load [RT arp_f[isArp]:0 (a)]
3: SetRetVal( %2)
4: Return

---------------------------------------------------
Parsing: "class O1{int a_; int b_; int f(){return a_ + g();} int g(){return b_;} }void main(){O1 inst; int a; a = inst.f() + inst.a_;}"

Scopes of module:
Scope 0: {(5:O1) (6:main) }
HScope of O1 1: {(1:a_) (2:b_) (3:f) (4:g) }
Scope 2: {}
Scope 3: {}
Scope 4: {(7:inst) (8:a) }


AST fully decorated dump:
[CDef] O1 [O1]
-[VDec] int a_
-[VDec] int b_
-[FDef] FuncDef: f
--[Retst] Return ( + )
---Op: +  [int Rvalue]
----[Var] a_ [int Lvalue Read Value Memb]
----[Fret] FuncRet: int [int Rvalue Memb]
-----[Fcal] FuncCall: g [function: ()->int]
------[Var] g [function: ()->int Read Value Memb]

-[FDef] FuncDef: g
--[Retst] Return (b_)
---[Var] b_ [int Lvalue Read Value Memb]

[FDef] FuncDef: main
-[VDec] O1 inst 
-[VDec] int a 
-[Assgn] 
--[Var] a [int Lvalue Write Value Nmemb]
--Op: +  [int Rvalue]
---[Fret] FuncRet: int [int Rvalue Nmemb]
----[Fcal] FuncCall: inst.f [function: ()->int]
-----[Dotop] inst.f [function: ()->int Memb]
------[Var] inst [O1 Read Address Nmemb]
------[Vnam] f
---[Dotop] inst.a_ [int Lvalue Memb]
----[Var] inst [O1 Lvalue Read Address Nmemb]
----[Vnam] a_


Declaration Table:
5: Symbol: [ in scope 0 O1 of type O1]
6: Symbol: [ in scope 0 main of type function: ()->void]
7: Symbol: [ in scope 4 inst of type O1]
8: Symbol: [ in scope 4 a of type int]

IR dump:
LT entry_O1::f[isTarget]
0: %0 = Load [RT this_O1[isThisPtr]:0 (a_)]
1: %1 = Load [RT this_O1[isThisPtr]:0 ()]
2: SetArg( %1)
3: call [LT entry_O1::g[isTarget]:0 ()]
4: %2 = GetRetVal()
5: %3 = %0 + %2
6: SetRetVal( %3)
7: Return
LT entry_O1::g[isTarget]
0: %0 = Load [RT this_O1[isThisPtr]:1 (b_)]
1: SetRetVal( %0)
2: Return
LT entry_main[isTarget]
0: %0 = PtrElem( LT MainDS:0 (inst))
1: SetArg( %0)
2: call [LT entry_O1::f[isTarget]:0 ()]
3: %1 = GetRetVal()
4: %2 = PtrElem( LT MainDS:0 (inst))
5: %3 = Load [ %2 + 0 (a_)]
6: %4 = %1 + %3
7: store %4 to [LT MainDS:2 (a)]
8: ReturnMain

---------------------------------------------------
Parsing: "class A{int a; int fa(){return 1;}} class B{int b; int fb(){return 1;}}class C: A, B{int c; int fc(){return 1;}}void main(){C inst; int a; a = inst.fc() + inst.fb() + inst.fa();}"
ObjRec for C:AB -> (fa, 0) (a, 0) (fb, 1) (b, 1) 

Scopes of module:
Scope 0: {(3:A) (6:B) (9:C) (10:main) }
HScope of A 1: {(1:a) (2:fa) }
Scope 2: {}
HScope of B 3: {(4:b) (5:fb) }
Scope 4: {}
HScope of C 5: {(7:c) (8:fc) }
Scope 6: {}
Scope 7: {(11:inst) (12:a) }


AST fully decorated dump:
[CDef] A [A]
-[VDec] int a
-[FDef] FuncDef: fa
--[Retst] Return (1)
---[Lit] 1 [int Rvalue]

[CDef] B [B]
-[VDec] int b
-[FDef] FuncDef: fb
--[Retst] Return (1)
---[Lit] 1 [int Rvalue]

[CDef] C:AB [C]
-[VDec] int c
-[FDef] FuncDef: fc
--[Retst] Return (1)
---[Lit] 1 [int Rvalue]

[FDef] FuncDef: main
-[VDec] C inst 
-[VDec] int a 
-[Assgn] 
--[Var] a [int Lvalue Write Value Nmemb]
--Op: +  [int Rvalue]
---Op: +  [int Rvalue]
----[Fret] FuncRet: int [int Rvalue Nmemb]
-----[Fcal] FuncCall: inst.fc [function: ()->int]
------[Dotop] inst.fc [function: ()->int Memb]
-------[Var] inst [C Read Address Nmemb]
-------[Vnam] fc
----[Fret] FuncRet: int [int Rvalue Nmemb]
-----[Fcal] FuncCall: inst.fb [function: ()->int]
------[Dotop] inst.fb [function: ()->int Memb]
-------[Var] inst [C Read Address Nmemb]
-------[Vnam] fb
---[Fret] FuncRet: int [int Rvalue Nmemb]
----[Fcal] FuncCall: inst.fa [function: ()->int]
-----[Dotop] inst.fa [function: ()->int Memb]
------[Var] inst [C Read Address Nmemb]
------[Vnam] fa


Declaration Table:
3: Symbol: [ in scope 0 A of type A]
6: Symbol: [ in scope 0 B of type B]
9: Symbol: [ in scope 0 C of type C]
10: Symbol: [ in scope 0 main of type function: ()->void]
11: Symbol: [ in scope 7 inst of type C]
12: Symbol: [ in scope 7 a of type int]

IR dump:
LT entry_A::fa[isTarget]
0: %0 = LoadI(1)
1: SetRetVal( %0)
2: Return
LT entry_B::fb[isTarget]
0: %0 = LoadI(1)
1: SetRetVal( %0)
2: Return
LT entry_C::fc[isTarget]
0: %0 = LoadI(1)
1: SetRetVal( %0)
2: Return
LT entry_main[isTarget]
0: %0 = PtrElem( LT MainDS:0 (inst))
1: SetArg( %0)
2: call [LT entry_C::fc[isTarget]:0 ()]
3: %1 = GetRetVal()
4: %2 = PtrElem( LT MainDS:0 (inst))
5: %3 = LoadI(1)
6: %4 = %2 + %3
7: SetArg( %4)
8: call [LT entry_B::fb[isTarget]:0 ()]
9: %5 = GetRetVal()
10: %6 = %1 + %5
11: %7 = PtrElem( LT MainDS:0 (inst))
12: %8 = LoadI(0)
13: %9 = %7 + %8
14: SetArg( %9)
15: call [LT entry_A::fa[isTarget]:0 ()]
16: %10 = GetRetVal()
17: %11 = %6 + %10
18: store %11 to [LT MainDS:3 (a)]
19: ReturnMain

---------------------------------------------------
Parsing: "class A        {int a; int fa(){return 1;}} class B : A    {int b; int fb(){return 1;}} class C : B    {int c; int fc(){return 1;}} class D        {int d; int fd(){return 1;}} class E : D    {int e; int fe(){return 1;}} class F : E    {int f; int ff(){return 1;}} class G : C,F  {int g; int fg(){return 1;}} void main(){G inst; int a; a = inst.fa() + inst.fb() + inst.fc() +  inst.fd() + inst.fe() + inst.ff() + inst.fg();}"
ObjRec for B:A -> (fa, 0) (a, 0) 
ObjRec for C:B:A -> (fa, 0) (fb, 0) (a, 0) (b, 1) 
ObjRec for E:D -> (fd, 0) (d, 0) 
ObjRec for F:E:D -> (fd, 0) (fe, 0) (d, 0) (e, 1) 
ObjRec for G:C:B:AF:E:D -> (fa, 0) (fb, 0) (fc, 0) (a, 0) (b, 1) (c, 2) (fd, 3) (fe, 3) (ff, 3) (d, 3) (e, 4) (f, 5) 

Scopes of module:
Scope 0: {(3:A) (6:B) (9:C) (12:D) (15:E) (18:F) (21:G) (22:main) }
HScope of A 1: {(1:a) (2:fa) }
Scope 2: {}
HScope of B 3: {(4:b) (5:fb) }
Scope 4: {}
HScope of C 5: {(7:c) (8:fc) }
Scope 6: {}
HScope of D 7: {(10:d) (11:fd) }
Scope 8: {}
HScope of E 9: {(13:e) (14:fe) }
Scope 10: {}
HScope of F 11: {(16:f) (17:ff) }
Scope 12: {}
HScope of G 13: {(19:g) (20:fg) }
Scope 14: {}
Scope 15: {(23:inst) (24:a) }


AST fully decorated dump:
[CDef] A [A]
-[VDec] int a
-[FDef] FuncDef: fa
--[Retst] Return (1)
---[Lit] 1 [int Rvalue]

[CDef] B:A [B]
-[VDec] int b
-[FDef] FuncDef: fb
--[Retst] Return (1)
---[Lit] 1 [int Rvalue]

[CDef] C:B:A [C]
-[VDec] int c
-[FDef] FuncDef: fc
--[Retst] Return (1)
---[Lit] 1 [int Rvalue]

[CDef] D [D]
-[VDec] int d
-[FDef] FuncDef: fd
--[Retst] Return (1)
---[Lit] 1 [int Rvalue]

[CDef] E:D [E]
-[VDec] int e
-[FDef] FuncDef: fe
--[Retst] Return (1)
---[Lit] 1 [int Rvalue]

[CDef] F:E:D [F]
-[VDec] int f
-[FDef] FuncDef: ff
--[Retst] Return (1)
---[Lit] 1 [int Rvalue]

[CDef] G:C:B:AF:E:D [G]
-[VDec] int g
-[FDef] FuncDef: fg
--[Retst] Return (1)
---[Lit] 1 [int Rvalue]

[FDef] FuncDef: main
-[VDec] G inst 
-[VDec] int a 
-[Assgn] 
--[Var] a [int Lvalue Write Value Nmemb]
--Op: +  [int Rvalue]
---Op: +  [int Rvalue]
----Op: +  [int Rvalue]
-----Op: +  [int Rvalue]
------Op: +  [int Rvalue]
-------Op: +  [int Rvalue]
--------[Fret] FuncRet: int [int Rvalue Nmemb]
---------[Fcal] FuncCall: inst.fa [function: ()->int]
----------[Dotop] inst.fa [function: ()->int Memb]
-----------[Var] inst [G Read Address Nmemb]
-----------[Vnam] fa
--------[Fret] FuncRet: int [int Rvalue Nmemb]
---------[Fcal] FuncCall: inst.fb [function: ()->int]
----------[Dotop] inst.fb [function: ()->int Memb]
-----------[Var] inst [G Read Address Nmemb]
-----------[Vnam] fb
-------[Fret] FuncRet: int [int Rvalue Nmemb]
--------[Fcal] FuncCall: inst.fc [function: ()->int]
---------[Dotop] inst.fc [function: ()->int Memb]
----------[Var] inst [G Read Address Nmemb]
----------[Vnam] fc
------[Fret] FuncRet: int [int Rvalue Nmemb]
-------[Fcal] FuncCall: inst.fd [function: ()->int]
--------[Dotop] inst.fd [function: ()->int Memb]
---------[Var] inst [G Read Address Nmemb]
---------[Vnam] fd
-----[Fret] FuncRet: int [int Rvalue Nmemb]
------[Fcal] FuncCall: inst.fe [function: ()->int]
-------[Dotop] inst.fe [function: ()->int Memb]
--------[Var] inst [G Read Address Nmemb]
--------[Vnam] fe
----[Fret] FuncRet: int [int Rvalue Nmemb]
-----[Fcal] FuncCall: inst.ff [function: ()->int]
------[Dotop] inst.ff [function: ()->int Memb]
-------[Var] inst [G Read Address Nmemb]
-------[Vnam] ff
---[Fret] FuncRet: int [int Rvalue Nmemb]
----[Fcal] FuncCall: inst.fg [function: ()->int]
-----[Dotop] inst.fg [function: ()->int Memb]
------[Var] inst [G Read Address Nmemb]
------[Vnam] fg


Declaration Table:
3: Symbol: [ in scope 0 A of type A]
6: Symbol: [ in scope 0 B of type B]
9: Symbol: [ in scope 0 C of type C]
12: Symbol: [ in scope 0 D of type D]
15: Symbol: [ in scope 0 E of type E]
18: Symbol: [ in scope 0 F of type F]
21: Symbol: [ in scope 0 G of type G]
22: Symbol: [ in scope 0 main of type function: ()->void]
23: Symbol: [ in scope 15 inst of type G]
24: Symbol: [ in scope 15 a of type int]

IR dump:
LT entry_A::fa[isTarget]
0: %0 = LoadI(1)
1: SetRetVal( %0)
2: Return
LT entry_B::fb[isTarget]
0: %0 = LoadI(1)
1: SetRetVal( %0)
2: Return
LT entry_C::fc[isTarget]
0: %0 = LoadI(1)
1: SetRetVal( %0)
2: Return
LT entry_D::fd[isTarget]
0: %0 = LoadI(1)
1: SetRetVal( %0)
2: Return
LT entry_E::fe[isTarget]
0: %0 = LoadI(1)
1: SetRetVal( %0)
2: Return
LT entry_F::ff[isTarget]
0: %0 = LoadI(1)
1: SetRetVal( %0)
2: Return
LT entry_G::fg[isTarget]
0: %0 = LoadI(1)
1: SetRetVal( %0)
2: Return
LT entry_main[isTarget]
0: %0 = PtrElem( LT MainDS:0 (inst))
1: %1 = LoadI(0)
2: %2 = %0 + %1
3: SetArg( %2)
4: call [LT entry_A::fa[isTarget]:0 ()]
5: %3 = GetRetVal()
6: %4 = PtrElem( LT MainDS:0 (inst))
7: %5 = LoadI(0)
8: %6 = %4 + %5
9: SetArg( %6)
10: call [LT entry_B::fb[isTarget]:0 ()]
11: %7 = GetRetVal()
12: %8 = %3 + %7
13: %9 = PtrElem( LT MainDS:0 (inst))
14: %10 = LoadI(0)
15: %11 = %9 + %10
16: SetArg( %11)
17: call [LT entry_C::fc[isTarget]:0 ()]
18: %12 = GetRetVal()
19: %13 = %8 + %12
20: %14 = PtrElem( LT MainDS:0 (inst))
21: %15 = LoadI(3)
22: %16 = %14 + %15
23: SetArg( %16)
24: call [LT entry_D::fd[isTarget]:0 ()]
25: %17 = GetRetVal()
26: %18 = %13 + %17
27: %19 = PtrElem( LT MainDS:0 (inst))
28: %20 = LoadI(3)
29: %21 = %19 + %20
30: SetArg( %21)
31: call [LT entry_E::fe[isTarget]:0 ()]
32: %22 = GetRetVal()
33: %23 = %18 + %22
34: %24 = PtrElem( LT MainDS:0 (inst))
35: %25 = LoadI(3)
36: %26 = %24 + %25
37: SetArg( %26)
38: call [LT entry_F::ff[isTarget]:0 ()]
39: %27 = GetRetVal()
40: %28 = %23 + %27
41: %29 = PtrElem( LT MainDS:0 (inst))
42: SetArg( %29)
43: call [LT entry_G::fg[isTarget]:0 ()]
44: %30 = GetRetVal()
45: %31 = %28 + %30
46: store %31 to [LT MainDS:7 (a)]
47: ReturnMain

---------------------------------------------------
Parsing: "void main(){int a, b, c; a = a + 10; b = 11; c = 12;} int f(){int a, b, c;     a = a + 10; b = 11; c = 12;}"

Scopes of module:
Scope 0: {(1:main) (5:f) }
Scope 1: {(2:a) (3:b) (4:c) }
Scope 2: {(6:a) (7:b) (8:c) }


AST fully decorated dump:
[FDef] FuncDef: main
-[VDec] int a 
[VDec] int b 
[VDec] int c 
-[Assgn] 
--[Var] a [int Lvalue Write Value Nmemb]
--Op: +  [int Rvalue]
---[Var] a [int Lvalue Read Value Nmemb]
---[Lit] 10 [int Rvalue]
-[Assgn] 
--[Var] b [int Lvalue Write Value Nmemb]
--[Lit] 11 [int Rvalue]
-[Assgn] 
--[Var] c [int Lvalue Write Value Nmemb]
--[Lit] 12 [int Rvalue]
[FDef] FuncDef: f
-[VDec] int a 
[VDec] int b 
[VDec] int c 
-[Assgn] 
--[Var] a [int Lvalue Write Value Nmemb]
--Op: +  [int Rvalue]
---[Var] a [int Lvalue Read Value Nmemb]
---[Lit] 10 [int Rvalue]
-[Assgn] 
--[Var] b [int Lvalue Write Value Nmemb]
--[Lit] 11 [int Rvalue]
-[Assgn] 
--[Var] c [int Lvalue Write Value Nmemb]
--[Lit] 12 [int Rvalue]


Declaration Table:
1: Symbol: [ in scope 0 main of type function: ()->void]
2: Symbol: [ in scope 1 a of type int]
3: Symbol: [ in scope 1 b of type int]
4: Symbol: [ in scope 1 c of type int]
5: Symbol: [ in scope 0 f of type function: ()->int]
6: Symbol: [ in scope 2 a of type int]
7: Symbol: [ in scope 2 b of type int]
8: Symbol: [ in scope 2 c of type int]

IR dump:
LT entry_main[isTarget]
0: %0 = Load [LT MainDS:0 (a)]
1: %1 = LoadI(10)
2: %2 = %0 + %1
3: store %2 to [LT MainDS:0 (a)]
4: %4 = LoadI(11)
5: store %4 to [LT MainDS:1 (b)]
6: %6 = LoadI(12)
7: store %6 to [LT MainDS:2 (c)]
8: ReturnMain
LT entry_f[isTarget]
0: %0 = Load [RT arp_f[isArp]:0 (a)]
1: %1 = LoadI(10)
2: %2 = %0 + %1
3: store %2 to [RT arp_f[isArp]:0 (a)]
4: %4 = LoadI(11)
5: store %4 to [RT arp_f[isArp]:-1 (b)]
6: %6 = LoadI(12)
7: store %6 to [RT arp_f[isArp]:-2 (c)]
8: Return


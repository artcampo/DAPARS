---------------------------------------------------
Parsing: "void main(){int a; a = 1+2; }"
Backend::Davm
%0 = LoadI(1)
%1 = LoadI(2)
%2 = %0 + %1
store %2 to [LT MainDS:0 (a)]
ReturnMain
---------
Bytecode:
LOADI, r1 val: 1
LOADI, r2 val: 2
ADD, rs1 rs2 rd3
STORE, r3 to [@0]
STOP
Static data segment size: 1

---------------------------------------------------
Parsing: "void main(){int a, b, c; a = 4; b = 3; c = a + b; }"
Backend::Davm
%0 = LoadI(4)
store %0 to [LT MainDS:0 (a)]
%2 = LoadI(3)
store %2 to [LT MainDS:-1 (b)]
%4 = Load [LT MainDS:0 (a)]
%5 = Load [LT MainDS:-1 (b)]
%6 = %4 + %5
store %6 to [LT MainDS:-2 (c)]
ReturnMain
---------
Bytecode:
LOADI, r1 val: 4
STORE, r1 to [@0]
LOADI, r2 val: 3
STORE, r2 to [@-1]
ADD, rs1 rs2 rd3
STORE, r3 to [@-2]
STOP
Static data segment size: 3

---------------------------------------------------
Parsing: "int f(int p){ return p; }void main(){int a; a = 1; a = f(a); }"
Backend::Davm
%0 = LoadI(1)
store %0 to [LT MainDS:0 (a)]
%2 = Load [LT MainDS:0 (a)]
SetArg( %2)
call [LT entry_f[isTarget]:0 ()]
%3 = GetRetVal()
store %3 to [LT MainDS:0 (a)]
ReturnMain
%0 = GetArg( arg0 )
SetRetVal( %0)
Return
---------
Bytecode:
LOADI, r1 val: 1
STORE, r1 to [@0]
MOV, rs1 rd0
CALL: @7
MOV, rs0 rd1
STORE, r1 to [@0]
STOP
MOV, rs15 rd14
MOV, rs0 rd0
RETURN
Static data segment size: 1

---------------------------------------------------
Parsing: "int f(int p0, int p1){ return p0 + p1; }void main(){int a; a = f(9,8); }"
Backend::Davm
%0 = LoadI(9)
%1 = LoadI(8)
SetArg( %0)
SetArg( %1)
call [LT entry_f[isTarget]:0 ()]
%2 = GetRetVal()
store %2 to [LT MainDS:0 (a)]
ReturnMain
%0 = GetArg( arg0 )
%1 = Load [RT arp_f[isArp]:2 (p1)]
%2 = %0 + %1
SetRetVal( %2)
Return
---------
Bytecode:
LOADI, r1 val: 9
LOADI, r2 val: 8
MOV, rs1 rd0
PUSH, r2
CALL: @9
ADDI, rd15 1
MOV, rs0 rd1
STORE, r1 to [@0]
STOP
MOV, rs15 rd14
LOADB, r1 <- [@ r14 + 2]
ADD, rs0 rs1 rd2
MOV, rs2 rd0
RETURN
Static data segment size: 1

---------------------------------------------------
Parsing: "int f(int p0, int p1, int p2, int p3){ return p0 + p1 + p2 + p3; }void main(){int a; a = f(9,8,7,6); }"
Backend::Davm
%0 = LoadI(9)
%1 = LoadI(8)
%2 = LoadI(7)
%3 = LoadI(6)
SetArg( %0)
SetArg( %1)
SetArg( %2)
SetArg( %3)
call [LT entry_f[isTarget]:0 ()]
%4 = GetRetVal()
store %4 to [LT MainDS:0 (a)]
ReturnMain
%0 = GetArg( arg0 )
%1 = Load [RT arp_f[isArp]:4 (p1)]
%2 = %0 + %1
%3 = Load [RT arp_f[isArp]:3 (p2)]
%4 = %2 + %3
%5 = Load [RT arp_f[isArp]:2 (p3)]
%6 = %4 + %5
SetRetVal( %6)
Return
---------
Bytecode:
LOADI, r1 val: 9
LOADI, r2 val: 8
LOADI, r3 val: 7
LOADI, r4 val: 6
MOV, rs1 rd0
PUSH, r2
PUSH, r3
PUSH, r4
CALL: @13
ADDI, rd15 3
MOV, rs0 rd1
STORE, r1 to [@0]
STOP
MOV, rs15 rd14
LOADB, r1 <- [@ r14 + 4]
ADD, rs0 rs1 rd2
LOADB, r3 <- [@ r14 + 3]
ADD, rs2 rs3 rd4
LOADB, r5 <- [@ r14 + 2]
ADD, rs4 rs5 rd6
MOV, rs6 rd0
RETURN
Static data segment size: 1

---------------------------------------------------
Parsing: "int f(){ int a; return a; }void main(){int a; a = f(); }"
Backend::Davm
call [LT entry_f[isTarget]:0 ()]
%0 = GetRetVal()
store %0 to [LT MainDS:0 (a)]
ReturnMain
%0 = Load [RT arp_f[isArp]:0 (a)]
SetRetVal( %0)
Return
---------
Bytecode:
CALL: @4
MOV, rs0 rd1
STORE, r1 to [@0]
STOP
PUSH, r14
MOV, rs15 rd14
SUBI, rd15 1
LOADB, r1 <- [@ r14 + 0]
MOV, rs1 rd0
MOV, rs14 rd15
POP, r14
RETURN
Static data segment size: 1

---------------------------------------------------
Parsing: "int f(){ int a,b,c,d; return a + d; }void main(){int a; a = f(); }"
Backend::Davm
call [LT entry_f[isTarget]:0 ()]
%0 = GetRetVal()
store %0 to [LT MainDS:0 (a)]
ReturnMain
%0 = Load [RT arp_f[isArp]:0 (a)]
%1 = Load [RT arp_f[isArp]:-3 (d)]
%2 = %0 + %1
SetRetVal( %2)
Return
---------
Bytecode:
CALL: @4
MOV, rs0 rd1
STORE, r1 to [@0]
STOP
PUSH, r14
MOV, rs15 rd14
SUBI, rd15 4
LOADB, r1 <- [@ r14 + 0]
LOADB, r2 <- [@ r14 + -3]
ADD, rs1 rs2 rd3
MOV, rs3 rd0
MOV, rs14 rd15
POP, r14
RETURN
Static data segment size: 1

---------------------------------------------------
Parsing: "void main(){int a, b, c, d; a = 1; b = 0;if((a+b) < 2){a = 2;} else {a=1;} c = a; d = b; }"
Backend::Davm
%0 = LoadI(1)
store %0 to [LT MainDS:0 (a)]
%2 = LoadI(0)
store %2 to [LT MainDS:-1 (b)]
%4 = Load [LT MainDS:0 (a)]
%5 = Load [LT MainDS:-1 (b)]
%6 = %4 + %5
%7 = LoadI(2)
%8 = %6 < %7
JumpCondTrue %8 to:11
JumpCondFalse %8 to:14
%9 = LoadI(2)
store %9 to [LT MainDS:0 (a)]
JumpIncond17
%11 = LoadI(1)
store %11 to [LT MainDS:0 (a)]
JumpIncond17
%13 = Load [LT MainDS:0 (a)]
store %13 to [LT MainDS:-2 (c)]
%15 = Load [LT MainDS:-1 (b)]
store %15 to [LT MainDS:-3 (d)]
ReturnMain
---------
Bytecode:
LOADI, r1 val: 1
STORE, r1 to [@0]
LOADI, r2 val: 0
STORE, r2 to [@-1]
ADD, rs1 rs2 rd3
LOADI, r4 val: 2
LST, rs3 rs4 rd5
JUMPIF true to:9
JUMPIF false to:12
LOADI, r2 val: 2
STORE, r2 to [@0]
JUMP: @15
LOADI, r1 val: 1
STORE, r1 to [@0]
JUMP: @15
STORE, r1 to [@-2]
STORE, r2 to [@-3]
STOP
Static data segment size: 4

---------------------------------------------------
Parsing: "int f(){ return 1; }int g(){ return f() + 2; }void main(){int a; a = f() + g();}"
Backend::Davm
call [LT entry_f[isTarget]:0 ()]
%0 = GetRetVal()
call [LT entry_g[isTarget]:0 ()]
%1 = GetRetVal()
%2 = %0 + %1
store %2 to [LT MainDS:0 (a)]
ReturnMain
%0 = LoadI(1)
SetRetVal( %0)
Return
call [LT entry_f[isTarget]:0 ()]
%0 = GetRetVal()
%1 = LoadI(2)
%2 = %0 + %1
SetRetVal( %2)
Return
---------
Bytecode:
CALL: @7
MOV, rs0 rd1
CALL: @11
MOV, rs0 rd1
ADD, rs2 rs1 rd3
STORE, r3 to [@0]
STOP
MOV, rs15 rd14
LOADI, r1 val: 1
MOV, rs1 rd0
RETURN
MOV, rs15 rd14
CALL: @7
MOV, rs0 rd1
LOADI, r2 val: 2
ADD, rs1 rs2 rd3
MOV, rs3 rd0
RETURN
Static data segment size: 1


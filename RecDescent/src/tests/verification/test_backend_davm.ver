---------------------------------------------------
Parsing: "void main(){int a; a = 1+2; }"
Backend::Davm
%0 = LoadI(1)
%1 = LoadI(2)
%2 = %0 + %1
store %2 to [LT MainDS:0 (a)]
ReturnMain
---------
Bytecode:
LOADI, r1 val: 1
LOADI, r2 val: 2
ADD, rs1 rs2 rd3
STORE, r3 to [@0]
STOP
Static data segment size: 1

---------------------------------------------------
Parsing: "void main(){int a, b, c; a = 4; b = 3; c = a + b; }"
Backend::Davm
%0 = LoadI(4)
store %0 to [LT MainDS:0 (a)]
%2 = LoadI(3)
store %2 to [LT MainDS:1 (b)]
%4 = Load [LT MainDS:0 (a)] **
%5 = Load [LT MainDS:1 (b)] **
%6 = %4 + %5
store %6 to [LT MainDS:2 (c)]
ReturnMain
---------
Bytecode:
LOADI, r1 val: 4
STORE, r1 to [@0]
LOADI, r2 val: 3
STORE, r2 to [@1]
ADD, rs1 rs2 rd3
STORE, r3 to [@2]
STOP
Static data segment size: 3

---------------------------------------------------
Parsing: "int f(int p){ return p; }void main(){int a; a = 1; a = f(a); }"
Backend::Davm
%0 = LoadI(1)
store %0 to [LT MainDS:0 (a)]
%2 = Load [LT MainDS:0 (a)] **
SetPar( %2)
call [LT entry_f[isTarget]:0 ()]
%3 = GetRetVal() !!!
store %3 to [LT MainDS:0 (a)]
ReturnMain
%0 = GetArg( arg0 )
SetRetVal( %0) !!!
Return
---------
Bytecode:
LOADI, r1 val: 1
STORE, r1 to [@0]
MOV, rs1 rd0
CALL: @0
MOV, rs0 rd2
STORE, r2 to [@0]
STOP
MOV, rs15 rd14
RETURN
Static data segment size: 1

---------------------------------------------------
Parsing: "int f(int p0, int p1){ return p0 + p1; }void main(){int a; a = f(9,8); }"
Backend::Davm
%0 = LoadI(9)
%1 = LoadI(8)
SetPar( %0)
SetPar( %1)
call [LT entry_f[isTarget]:0 ()]
%2 = GetRetVal() !!!
store %2 to [LT MainDS:0 (a)]
ReturnMain
%0 = GetArg( arg0 )
%1 = Load [RT arp_f[isArp]:2 (p1)] **
dest: 1
rs: 1
@: RT arp_f[isArp]:2 (p1)
%2 = %0 + %1
SetRetVal( %2) !!!
Return
---------
Bytecode:
LOADI, r1 val: 9
LOADI, r2 val: 8
MOV, rs1 rd0
CALL: @0
MOV, rs0 rd3
STORE, r3 to [@0]
STOP
MOV, rs15 rd14
LOADB, r1 <- [@ r14 + 2]
ADD, rs0 rs1 rd2
RETURN
Static data segment size: 1


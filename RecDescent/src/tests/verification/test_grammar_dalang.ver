KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
Dalang grammar v0.3
Grammar:
PROG -> FDEFL  init 
FDEFL -> FDEF FDEFL 
FDEFL -> {empty} 
FDEF -> TYPE {nam} ( PARL ) { STMTS } 
PARL -> PAR PARLP 
PARL -> {empty} 
PARLP -> PAR PARLP 
PARLP -> {empty} 
PAR -> TYPE {nam} 
ARGL -> E ARGLP 
ARGL -> {empty} 
ARGLP -> E ARGLP 
ARGLP -> {empty} 
STMTS -> STMT STMTS 
STMTS -> {empty} 
STMT -> E = E ; 
STMT -> DECL ; 
STMT -> if ( E ) { STMTS } IFELSE 
STMT -> while ( E ) { STMTS } 
IFELSE -> else { STMTS } 
IFELSE -> {empty} 
DECL -> TYPE NAME_LIST 
TYPE -> int TYPE' 
TYPE -> bool TYPE' 
TYPE' -> * 
TYPE' -> {empty} 
NAME_LIST -> {nam} NAME_LIST' 
NAME_LIST' -> , {nam} NAME_LIST' 
NAME_LIST' -> {empty} 
E -> T E' 
E' -> + T E' 
E' -> {empty} 
T -> F 
F -> & F' 
F -> * F' 
F -> F' 
F' -> ( E ) 
F' -> {num} 
F' -> {nam} 
F' ->  true 
F' -> false 
ARGM -> {empty} 
ARGM -> ( PARL ) 

-----------------------------
First Table
ARGL => & * {empty} false ( {nam} {num}  true 
ARGLP => & * {empty} false ( {nam} {num}  true 
ARGM => {empty} ( 
DECL => bool int 
E => & * false ( {nam} {num}  true 
E' => {empty} + 
F => & * false ( {nam} {num}  true 
F' => false ( {nam} {num}  true 
FDEF => bool int 
FDEFL => bool {empty} int 
IFELSE => else {empty} 
NAME_LIST => {nam} 
NAME_LIST' => , {empty} 
PAR => bool int 
PARL => bool {empty} int 
PARLP => bool {empty} int 
PROG => bool {empty} int 
STMT => & * bool false if int ( {nam} {num}  true while 
STMTS => & * bool {empty} false if int ( {nam} {num}  true while 
T => & * false ( {nam} {num}  true 
TYPE => bool int 
TYPE' => * {empty} 
-----------------------------
Follow Table
ARGL => 
ARGLP => 
ARGM => 
DECL => ; 
E => & * = false ( {nam} {num} ) ;  true 
E' => & * = false ( {nam} {num} ) ;  true 
F => & * = false ( {nam} {num} + ) ;  true 
F' => & * = false ( {nam} {num} + ) ;  true 
FDEF => bool {eof} int 
FDEFL => {eof} 
IFELSE => & * bool false if int ( {nam} {num} }  true while 
NAME_LIST => ; 
NAME_LIST' => ; 
PAR => bool int ) 
PARL => ) 
PARLP => ) 
PROG => {eof} 
STMT => & * bool false if int ( {nam} {num} }  true while 
STMTS => } 
T => & * = false ( {nam} {num} + ) ;  true 
TYPE => {nam} 
TYPE' => {nam} 
-----------------------------
First+ Table
ARGL -> E ARGLP  => & * false ( {nam} {num}  true 
ARGL -> {empty}  => {empty} 
ARGLP -> E ARGLP  => & * false ( {nam} {num}  true 
ARGLP -> {empty}  => {empty} 
ARGM -> {empty}  => {empty} 
ARGM -> ( PARL )  => ( 
DECL -> TYPE NAME_LIST  => bool int 
E -> T E'  => & * false ( {nam} {num}  true 
E' -> {empty}  => & * {empty} = false ( {nam} {num} ) ;  true 
E' -> + T E'  => + 
F -> & F'  => & 
F -> * F'  => * 
F -> F'  => false ( {nam} {num}  true 
F' -> false  => false 
F' -> ( E )  => ( 
F' -> {nam}  => {nam} 
F' -> {num}  => {num} 
F' ->  true  =>  true 
FDEF -> TYPE {nam} ( PARL ) { STMTS }  => bool int 
FDEFL -> {empty}  => {empty} {eof} 
FDEFL -> FDEF FDEFL  => bool int 
IFELSE -> else { STMTS }  => else 
IFELSE -> {empty}  => & * bool {empty} false if int ( {nam} {num} }  true while 
NAME_LIST -> {nam} NAME_LIST'  => {nam} 
NAME_LIST' -> , {nam} NAME_LIST'  => , 
NAME_LIST' -> {empty}  => {empty} ; 
PAR -> TYPE {nam}  => bool int 
PARL -> {empty}  => {empty} ) 
PARL -> PAR PARLP  => bool int 
PARLP -> {empty}  => {empty} ) 
PARLP -> PAR PARLP  => bool int 
PROG -> FDEFL  init  => bool {empty} int 
STMT -> DECL ;  => bool int 
STMT -> E = E ;  => & * false ( {nam} {num}  true 
STMT -> if ( E ) { STMTS } IFELSE  => if 
STMT -> while ( E ) { STMTS }  => while 
STMTS -> {empty}  => {empty} } 
STMTS -> STMT STMTS  => & * bool false if int ( {nam} {num}  true while 
T -> F  => & * false ( {nam} {num}  true 
TYPE -> bool TYPE'  => bool 
TYPE -> int TYPE'  => int 
TYPE' -> *  => * 
TYPE' -> {empty}  => {empty} {nam} 
-----------------------------
Is backtrack free: 0

KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
Dalang grammar v0.3
Grammar:
PROG -> FDEFL  init 
FDEFL -> FDEF FDEFL 
FDEFL -> {empty} 
FDEF -> TYPE {nam} ( PARL ) { STMTS } 
PARL -> PAR PARLP 
PARL -> {empty} 
PARLP -> , PAR PARLP 
PARLP -> {empty} 
PAR -> TYPE {nam} 
ARGL -> E ARGLP 
ARGL -> {empty} 
ARGLP -> , E ARGLP 
ARGLP -> {empty} 
STMTS -> STMT STMTS 
STMTS -> {empty} 
STMT -> E = E ; 
STMT -> DECL ; 
STMT -> if ( E ) { STMTS } IFELSE 
STMT -> while ( E ) { STMTS } 
IFELSE -> else { STMTS } 
IFELSE -> {empty} 
DECL -> TYPE NAME_LIST 
TYPE -> int TYPE' 
TYPE -> bool TYPE' 
TYPE -> void TYPE' 
TYPE' -> * 
TYPE' -> {empty} 
NAME_LIST -> {nam} NAME_LIST' 
NAME_LIST' -> , {nam} NAME_LIST' 
NAME_LIST' -> {empty} 
E -> T E' 
E' -> + T E' 
E' -> {empty} 
T -> F 
F -> & F' 
F -> * F' 
F -> F' 
F' -> ( E ) 
F' -> {num} 
F' -> {nam} 
F' ->  true 
F' -> false 
ARGM -> {empty} 
ARGM -> ( PARL ) 

-----------------------------
First Table
ARGL => & * {empty} false ( {nam} {num}  true 
ARGLP => , {empty} 
ARGM => {empty} ( 
DECL => bool int void 
E => & * false ( {nam} {num}  true 
E' => {empty} + 
F => & * false ( {nam} {num}  true 
F' => false ( {nam} {num}  true 
FDEF => bool int void 
FDEFL => bool {empty} int void 
IFELSE => else {empty} 
NAME_LIST => {nam} 
NAME_LIST' => , {empty} 
PAR => bool int void 
PARL => bool {empty} int void 
PARLP => , {empty} 
PROG => bool {empty} int void 
STMT => & * bool false if int ( {nam} {num}  true void while 
STMTS => & * bool {empty} false if int ( {nam} {num}  true void while 
T => & * false ( {nam} {num}  true 
TYPE => bool int void 
TYPE' => * {empty} 
-----------------------------
Follow Table
ARGL => 
ARGLP => 
ARGM => 
DECL => ; 
E => , = ) ; 
E' => , = ) ; 
F => , = + ) ; 
F' => , = + ) ; 
FDEF => bool {eof} int void 
FDEFL => {eof} 
IFELSE => & * bool false if int ( {nam} {num} }  true void while 
NAME_LIST => ; 
NAME_LIST' => ; 
PAR => , ) 
PARL => ) 
PARLP => ) 
PROG => {eof} 
STMT => & * bool false if int ( {nam} {num} }  true void while 
STMTS => } 
T => , = + ) ; 
TYPE => {nam} 
TYPE' => {nam} 
-----------------------------
First+ Table
ARGL -> E ARGLP  => & * false ( {nam} {num}  true 
ARGL -> {empty}  => {empty} 
ARGLP -> , E ARGLP  => , 
ARGLP -> {empty}  => {empty} 
ARGM -> {empty}  => {empty} 
ARGM -> ( PARL )  => ( 
DECL -> TYPE NAME_LIST  => bool int void 
E -> T E'  => & * false ( {nam} {num}  true 
E' -> {empty}  => , {empty} = ) ; 
E' -> + T E'  => + 
F -> & F'  => & 
F -> * F'  => * 
F -> F'  => false ( {nam} {num}  true 
F' -> false  => false 
F' -> ( E )  => ( 
F' -> {nam}  => {nam} 
F' -> {num}  => {num} 
F' ->  true  =>  true 
FDEF -> TYPE {nam} ( PARL ) { STMTS }  => bool int void 
FDEFL -> {empty}  => {empty} {eof} 
FDEFL -> FDEF FDEFL  => bool int void 
IFELSE -> else { STMTS }  => else 
IFELSE -> {empty}  => & * bool {empty} false if int ( {nam} {num} }  true void while 
NAME_LIST -> {nam} NAME_LIST'  => {nam} 
NAME_LIST' -> , {nam} NAME_LIST'  => , 
NAME_LIST' -> {empty}  => {empty} ; 
PAR -> TYPE {nam}  => bool int void 
PARL -> {empty}  => {empty} ) 
PARL -> PAR PARLP  => bool int void 
PARLP -> , PAR PARLP  => , 
PARLP -> {empty}  => {empty} ) 
PROG -> FDEFL  init  => bool {empty} int void 
STMT -> DECL ;  => bool int void 
STMT -> E = E ;  => & * false ( {nam} {num}  true 
STMT -> if ( E ) { STMTS } IFELSE  => if 
STMT -> while ( E ) { STMTS }  => while 
STMTS -> {empty}  => {empty} } 
STMTS -> STMT STMTS  => & * bool false if int ( {nam} {num}  true void while 
T -> F  => & * false ( {nam} {num}  true 
TYPE -> bool TYPE'  => bool 
TYPE -> int TYPE'  => int 
TYPE -> void TYPE'  => void 
TYPE' -> *  => * 
TYPE' -> {empty}  => {empty} {nam} 
-----------------------------
Is backtrack free: 0

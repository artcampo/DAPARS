KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
KEYWORD EXTRA INFO NOT IMPLEMENTED
Dalang grammar v0.3
Grammar:
PROG -> DEFL  init 
DEFL -> FDEF DEFL 
DEFL -> CDEF DEFL 
DEFL -> {empty} 
CDEF -> class {nam} INHT_LIST { MEMBER } 
MEMBER_LIST -> TYPE {nam} MEMBER MEMBER_LIST 
MEMBER_LIST -> {empty} 
MEMBER -> ; 
MEMBER -> ( PARL ) { STMTS } 
INHT_LIST -> : ntype INHT_LIST' 
INHT_LIST -> {empty} 
INHT_LIST' -> , ntype INHT_LIST' 
INHT_LIST' -> {empty} 
FDEF -> TYPE {nam} ( PARL ) { STMTS } 
PARL -> PAR PARLP 
PARL -> {empty} 
PARLP -> , PAR PARLP 
PARLP -> {empty} 
PAR -> TYPE {nam} 
ARGL -> E ARGLP 
ARGL -> {empty} 
ARGLP -> , E ARGLP 
ARGLP -> {empty} 
STMTS -> STMT STMTS 
STMTS -> {empty} 
STMT -> E = E ; 
STMT -> DECL ; 
STMT -> if ( E ) { STMTS } IFELSE 
STMT -> while ( E ) { STMTS } 
STMT -> return E ; 
IFELSE -> else { STMTS } 
IFELSE -> {empty} 
DECL -> TYPE NAME_LIST 
TYPE -> int TYPE' 
TYPE -> bool TYPE' 
TYPE -> void TYPE' 
TYPE -> ntype TYPE' 
TYPE' -> * 
TYPE' -> {empty} 
NAME_LIST -> {nam} NAME_LIST' 
NAME_LIST' -> , {nam} NAME_LIST' 
NAME_LIST' -> {empty} 
E -> AE E' 
E' -> or AE E' 
E' -> {empty} 
AE -> RE AE'' 
AE'' -> and RE AE'' 
AE'' -> {empty} 
RE -> NE RE' 
RE' -> < NE RE' 
RE' -> == NE RE' 
RE' -> {empty} 
NE -> T NE' 
NE' -> + T NE' 
NE' -> {empty} 
T -> F 
F -> & NOT_E 
F -> * NOT_E 
F -> NOT_E 
NOT_E -> not F' 
NOT_E -> F' 
F' -> ( E ) 
F' -> {num} 
F' -> {nam} ARGM 
F' ->  true 
F' -> false 
ARGM -> {empty} 
ARGM -> ( ARGL ) 
ARGM -> . {nam} ARGM 

-----------------------------
First Table
AE => & * false ( {nam} not {num}  true 
AE'' => and {empty} 
ARGL => & * {empty} false ( {nam} not {num}  true 
ARGLP => , {empty} 
ARGM => . {empty} ( 
CDEF => class 
DECL => bool int ntype void 
DEFL => bool class {empty} int ntype void 
E => & * false ( {nam} not {num}  true 
E' => {empty} or 
F => & * false ( {nam} not {num}  true 
F' => false ( {nam} {num}  true 
FDEF => bool int ntype void 
IFELSE => else {empty} 
INHT_LIST => : {empty} 
INHT_LIST' => , {empty} 
MEMBER => ( ; 
MEMBER_LIST => bool {empty} int ntype void 
NAME_LIST => {nam} 
NAME_LIST' => , {empty} 
NE => & * false ( {nam} not {num}  true 
NE' => {empty} + 
NOT_E => false ( {nam} not {num}  true 
PAR => bool int ntype void 
PARL => bool {empty} int ntype void 
PARLP => , {empty} 
PROG => bool class {empty} int ntype void 
RE => & * false ( {nam} not {num}  true 
RE' => {empty} == < 
STMT => & * bool false if int ( {nam} not ntype {num} return  true void while 
STMTS => & * bool {empty} false if int ( {nam} not ntype {num} return  true void while 
T => & * false ( {nam} not {num}  true 
TYPE => bool int ntype void 
TYPE' => * {empty} 
-----------------------------
Follow Table
AE => , = or ) ; 
AE'' => , = or ) ; 
ARGL => ) 
ARGLP => ) 
ARGM => and , == = < or + ) ; 
CDEF => bool class {eof} int ntype void 
DECL => ; 
DEFL => {eof} 
E => , = ) ; 
E' => , = ) ; 
F => and , == = < or + ) ; 
F' => and , == = < or + ) ; 
FDEF => bool class {eof} int ntype void 
IFELSE => & * bool false if int ( {nam} not ntype {num} } return  true void while 
INHT_LIST => { 
INHT_LIST' => { 
MEMBER => bool int ntype } void 
MEMBER_LIST => 
NAME_LIST => ; 
NAME_LIST' => ; 
NE => and , == = < or ) ; 
NE' => and , == = < or ) ; 
NOT_E => and , == = < or + ) ; 
PAR => , ) 
PARL => ) 
PARLP => ) 
PROG => {eof} 
RE => and , = or ) ; 
RE' => and , = or ) ; 
STMT => & * bool false if int ( {nam} not ntype {num} } return  true void while 
STMTS => } 
T => and , == = < or + ) ; 
TYPE => {nam} 
TYPE' => {nam} 
-----------------------------
First+ Table
AE -> RE AE''  => & * false ( {nam} not {num}  true 
AE'' -> and RE AE''  => and 
AE'' -> {empty}  => , {empty} = or ) ; 
ARGL -> E ARGLP  => & * false ( {nam} not {num}  true 
ARGL -> {empty}  => {empty} ) 
ARGLP -> , E ARGLP  => , 
ARGLP -> {empty}  => {empty} ) 
ARGM -> . {nam} ARGM  => . 
ARGM -> {empty}  => and , {empty} == = < or + ) ; 
ARGM -> ( ARGL )  => ( 
CDEF -> class {nam} INHT_LIST { MEMBER }  => class 
DECL -> TYPE NAME_LIST  => bool int ntype void 
DEFL -> CDEF DEFL  => class 
DEFL -> {empty}  => {empty} {eof} 
DEFL -> FDEF DEFL  => bool int ntype void 
E -> AE E'  => & * false ( {nam} not {num}  true 
E' -> {empty}  => , {empty} = ) ; 
E' -> or AE E'  => or 
F -> & NOT_E  => & 
F -> * NOT_E  => * 
F -> NOT_E  => false ( {nam} not {num}  true 
F' -> false  => false 
F' -> ( E )  => ( 
F' -> {nam} ARGM  => {nam} 
F' -> {num}  => {num} 
F' ->  true  =>  true 
FDEF -> TYPE {nam} ( PARL ) { STMTS }  => bool int ntype void 
IFELSE -> else { STMTS }  => else 
IFELSE -> {empty}  => & * bool {empty} false if int ( {nam} not ntype {num} } return  true void while 
INHT_LIST -> : ntype INHT_LIST'  => : 
INHT_LIST -> {empty}  => {empty} { 
INHT_LIST' -> , ntype INHT_LIST'  => , 
INHT_LIST' -> {empty}  => {empty} { 
MEMBER -> ( PARL ) { STMTS }  => ( 
MEMBER -> ;  => ; 
MEMBER_LIST -> {empty}  => {empty} 
MEMBER_LIST -> TYPE {nam} MEMBER MEMBER_LIST  => bool int ntype void 
NAME_LIST -> {nam} NAME_LIST'  => {nam} 
NAME_LIST' -> , {nam} NAME_LIST'  => , 
NAME_LIST' -> {empty}  => {empty} ; 
NE -> T NE'  => & * false ( {nam} not {num}  true 
NE' -> {empty}  => and , {empty} == = < or ) ; 
NE' -> + T NE'  => + 
NOT_E -> F'  => false ( {nam} {num}  true 
NOT_E -> not F'  => not 
PAR -> TYPE {nam}  => bool int ntype void 
PARL -> {empty}  => {empty} ) 
PARL -> PAR PARLP  => bool int ntype void 
PARLP -> , PAR PARLP  => , 
PARLP -> {empty}  => {empty} ) 
PROG -> DEFL  init  => bool class {empty} int ntype void 
RE -> NE RE'  => & * false ( {nam} not {num}  true 
RE' -> {empty}  => and , {empty} = or ) ; 
RE' -> == NE RE'  => == 
RE' -> < NE RE'  => < 
STMT -> DECL ;  => bool int ntype void 
STMT -> E = E ;  => & * false ( {nam} not {num}  true 
STMT -> if ( E ) { STMTS } IFELSE  => if 
STMT -> return E ;  => return 
STMT -> while ( E ) { STMTS }  => while 
STMTS -> {empty}  => {empty} } 
STMTS -> STMT STMTS  => & * bool false if int ( {nam} not ntype {num} return  true void while 
T -> F  => & * false ( {nam} not {num}  true 
TYPE -> bool TYPE'  => bool 
TYPE -> int TYPE'  => int 
TYPE -> ntype TYPE'  => ntype 
TYPE -> void TYPE'  => void 
TYPE' -> *  => * 
TYPE' -> {empty}  => {empty} {nam} 
-----------------------------
Is backtrack free: 0

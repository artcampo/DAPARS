Grammar:
PROG -> E  init 
E -> T E' 
E' -> + T E' 
E' -> - T E' 
E' -> {empty} 
T -> F T' 
T' -> * F T' 
T' -> / F T' 
T' -> {empty} 
F -> ( E ) 
F -> {num} 
F -> {nam} 

---------------------------------------------------
Parsing: "main(){int a,b,c; while(true){b=2+3;} c=3+4; }"
Scope 1: {0, a 1, b 2, c }
Scope 2: {}


IR dump:
0: %0 = LoadI(1)
1: JumpCondTrue %0 to:3
2: JumpCondFalse %0 to:8
3: %1 = LoadI(2)
4: %2 = LoadI(3)
5: %3 = %1 + %2
6: store %3 to [Main:b]
7: JumpCondFalse %0 to:0
8: %5 = LoadI(3)
9: %6 = LoadI(4)
10: %7 = %5 + %6
11: store %7 to [Main:c]

---------------------------------------------------
Parsing: "main(){ int a, b; if(true){int c; a=2+3;} else{ int d, e,f; d = 4; } int g; b=5+6; }"
Scope 1: {0, a 1, b 6, g }
Scope 2: {2, c }
Scope 3: {3, d 4, e 5, f }


IR dump:
0: %0 = LoadI(1)
1: JumpCondTrue %0 to:3
2: JumpCondFalse %0 to:8
3: %1 = LoadI(2)
4: %2 = LoadI(3)
5: %3 = %1 + %2
6: store %3 to [Main:a]
7: JumpIncond11
8: %5 = LoadI(4)
9: store %5 to [Main:d]
10: JumpIncond11
11: %7 = LoadI(5)
12: %8 = LoadI(6)
13: %9 = %7 + %8
14: store %9 to [Main:b]

---------------------------------------------------
Parsing: "main(){int a,b,c; a = 2; b = 3 + a; c = a + b; }"
Scope 1: {0, a 1, b 2, c }


IR dump:
0: %0 = LoadI(2)
1: store %0 to [Main:a]
2: %2 = LoadI(3)
3: %3 = Load [Main:a]
4: %4 = %2 + %3
5: store %4 to [Main:b]
6: %6 = Load [Main:a]
7: %7 = Load [Main:b]
8: %8 = %6 + %7
9: store %8 to [Main:c]


Grammar:
PROG -> E  init 
E -> T E' 
E' -> + T E' 
E' -> - T E' 
E' -> {empty} 
T -> F T' 
T' -> * F T' 
T' -> / F T' 
T' -> {empty} 
F -> ( E ) 
F -> {num} 
F -> {nam} 

---------------------------------------------------
Parsing: "if(1+2){int a;} int b;"
[err:21] if's condition is not a bool at: "if(1+" -> "2){int a;} int b;"

AST dump:
-IfStmt:
--Cond: Op: +  [int Rvalue]
---Literal: 1 [int Rvalue]
---Literal: 2 [int Rvalue]
--Then:
---int a 

-int b 
0: Load, r:0 val: 1
1: Load, r:1 val: 2
2: ADD, rs1:0 rs2: 1 rd:2
3: jump if trueto:5
4: jump if falseto:7
5: NewVar: TypeId0
6: JUMP: @7
7: NewVar: TypeId0
8: STOP

---------------------------------------------------
Parsing: "int a; while(1+2){int b;} int c;"
[err:20] while's condition is not a bool at: "; while(1+" -> "2){int b;} int c;"

AST dump:
-int a 
-WhileStmt:
--Cond: Op: +  [int Rvalue]
---Literal: 1 [int Rvalue]
---Literal: 2 [int Rvalue]
--Body:
---int b 

--int c 
0: NewVar: TypeId0
1: Load, r:0 val: 1
2: Load, r:1 val: 2
3: ADD, rs1:0 rs2: 1 rd:2
4: jump if trueto:6
5: jump if falseto:8
6: NewVar: TypeId0
7: jump if falseto:1
8: NewVar: TypeId0
9: STOP


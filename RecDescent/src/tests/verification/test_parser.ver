Grammar:
PROG -> E  init 
E -> T E' 
E' -> + T E' 
E' -> - T E' 
E' -> {empty} 
T -> F T' 
T' -> * F T' 
T' -> / F T' 
T' -> {empty} 
F -> ( E ) 
F -> {num} 
F -> {nam} 

---------------------------------------------------
Parsing: "(1);"

AST
1

AST nodes
Literal: 1

---------------------------------------------------
Parsing: "1;2;3;"

AST
1
2
3

AST nodes
Literal: 1
Literal: 2
Literal: 3

---------------------------------------------------
Parsing: "2+3+4;"

AST
( ( 2 + 3 ) + 4 )

AST nodes
Op: + 
-Op: + 
--Literal: 2
--Literal: 3
-Literal: 4


---------------------------------------------------
Parsing: "2++3+4;"

Expecting numerical or lpar at: "2++" -> "3+4;"
Program syntactically incorrect

AST
( ( 2 + 3 ) + 4 )

AST nodes
Op: + 
-Op: + 
--Literal: 2
--Literal: 3
-Literal: 4


---------------------------------------------------
Parsing: "1+2;3+4;"

AST
( 1 + 2 )
( 3 + 4 )

AST nodes
Op: + 
-Literal: 1
-Literal: 2
Op: + 
-Literal: 3
-Literal: 4


---------------------------------------------------
Parsing: "1+2;3+4;5+6;"

AST
( 1 + 2 )
( 3 + 4 )
( 5 + 6 )

AST nodes
Op: + 
-Literal: 1
-Literal: 2
Op: + 
-Literal: 3
-Literal: 4
Op: + 
-Literal: 5
-Literal: 6


Grammar:
PROG -> E  init 
E -> T E' 
E' -> + T E' 
E' -> - T E' 
E' -> {empty} 
T -> F T' 
T' -> * F T' 
T' -> / F T' 
T' -> {empty} 
F -> ( E ) 
F -> {num} 
F -> {nam} 

---------------------------------------------------
Parsing: "1; if(2){3;}"

AST
1
if(2){
  3
  }

AST nodes
Literal: 1
StmtIf:
-Cond: Literal: 2
-Then:
--Literal: 3


---------------------------------------------------
Parsing: "1; if(2){3;} 4;"

AST
1
if(2){
  3
  }
4

AST nodes
Literal: 1
StmtIf:
-Cond: Literal: 2
-Then:
--Literal: 3

Literal: 4

---------------------------------------------------
Parsing: "1; if(2){3+4+5;}"

AST
1
if(2){
  ( ( 3 + 4 ) + 5 )
  }

AST nodes
Literal: 1
StmtIf:
-Cond: Literal: 2
-Then:
--Op: + 
---Op: + 
----Literal: 3
----Literal: 4
---Literal: 5


---------------------------------------------------
Parsing: "1; if(2){3+4+5;} 6;"

AST
1
if(2){
  ( ( 3 + 4 ) + 5 )
  }
6

AST nodes
Literal: 1
StmtIf:
-Cond: Literal: 2
-Then:
--Op: + 
---Op: + 
----Literal: 3
----Literal: 4
---Literal: 5

Literal: 6

---------------------------------------------------
Parsing: "1; if(2){if(3){4;if(5){6;}}}"

Invalid token after if at: "if(5){6;}}" -> "}"

Invalid token after if at: "f(5){6;}}}" -> ""
Program syntactically incorrect

AST
1
if(2){
  if(3){
    4
    if(5){
      6
      }
    }
  }

AST nodes
Literal: 1
StmtIf:
-Cond: Literal: 2
-Then:
--StmtIf:
---Cond: Literal: 3
---Then:
----Literal: 4
----StmtIf:
-----Cond: Literal: 5
-----Then:
------Literal: 6




---------------------------------------------------
Parsing: "1; if(2){if(3){4+5;if(6){7+8;}}}"

Invalid token after if at: "(6){7+8;}}" -> "}"

Invalid token after if at: "6){7+8;}}}" -> ""
Program syntactically incorrect

AST
1
if(2){
  if(3){
    ( 4 + 5 )
    if(6){
      ( 7 + 8 )
      }
    }
  }

AST nodes
Literal: 1
StmtIf:
-Cond: Literal: 2
-Then:
--StmtIf:
---Cond: Literal: 3
---Then:
----Op: + 
-----Literal: 4
-----Literal: 5
----StmtIf:
-----Cond: Literal: 6
-----Then:
------Op: + 
-------Literal: 7
-------Literal: 8




---------------------------------------------------
Parsing: "1; if(2){3;}else{4;}"

AST
1
if(2){
  3
  }
else{
  4
  }

AST nodes
Literal: 1
StmtIf:
-Cond: Literal: 2
-Then:
--Literal: 3
-Else:
--Literal: 4


---------------------------------------------------
Parsing: "1; if(2){3;}if(4){5;}else{6;}"

AST
1
if(2){
  3
  }
if(4){
  5
  }
else{
  6
  }

AST nodes
Literal: 1
StmtIf:
-Cond: Literal: 2
-Then:
--Literal: 3

StmtIf:
-Cond: Literal: 4
-Then:
--Literal: 5
-Else:
--Literal: 6


---------------------------------------------------
Parsing: "int a; int b; bool c;"

AST
int a 
int b 
bool c 

AST nodes
int a 
int b 
bool c 

---------------------------------------------------
Parsing: "int b c; bool e f;"

AST
int b int c 
bool e bool f 

AST nodes
int b int c 
bool e bool f 


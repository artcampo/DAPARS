Using register-register model.
SSA registers (phy-nodes not implemented yet!)

Instructions that always have a destination register:
reg_dst = LoadI(value)
reg_dst = Load(MemAddr)
reg_dst = BinaryOp(reg_src1, reg_src2)
reg_dst = UnaryOp(reg_src1, reg_src2)

Instructions that always have a source register:
store(reg_src, MemAddr)

Instructions that do not fit in the previous categories
call(Label)

Where MemAddr = {Label, Offset}

Label can be resolved either at link-time or at run-time.
Link-time labels: entry point for any function, local vars of main.
Run-time labels: local vars for any function other than main.

The IR already encodes the decision of how many arguments of a function
are passed in the stack or in registers. For the latter case a special
MemAddr is used. This ensures uniformity and makes further translation 
by the backend explicit.

The amount of registers used is in IR/IRSubtypes.hpp. For ease of testing
this number was set to 1, but the treatment is general as to handle n, where
n < (machine_registers - 4). 4 is the maximum fixed register usage.
